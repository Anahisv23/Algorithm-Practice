// You are working with a client who runs a retail store and has provided you with a CSV file containing their recent purchase data. 
// The CSV file contains the following columns: Order Number, Customer Name, Item Name, Quantity, Price, and Date.

// The client has asked you to transform the purchase data into a new format that includes the total revenue for each item and the total revenue for each customer. 
// The new format should be an object with the following structure:


// first part
// {
//     "items": {
//         "Item Name 1": {
//             "quantity": <total quantity sold for Item Name 1>,
//             "revenue": <total revenue generated by Item Name 1>
//         },
//         "Item Name 2": {
//             "quantity": <total quantity sold for Item Name 2>,
//             "revenue": <total revenue generated by Item Name 2>
//         },
//         ...
//     },
// } 

// second 
//     "customers": {
//         "Customer Name 1": {
//             "quantity": <total quantity purchased by Customer Name 1>,
//             "revenue": <total revenue generated by Customer Name 1>
//         },
//         "Customer Name 2": {
//             "quantity": <total quantity purchased by Customer Name 2>,
//             "revenue": <total revenue generated by Customer Name 2>
//         },
//         ...
//     }
// }

// Write a function that takes the path to the CSV file as input and returns the purchase data in the new format. 
// You can assume that the CSV file has a header row and that the columns are in the order specified above. 
// You can also assume that the CSV file contains at least one row of data.

const reformatPurchaseData = (purchaseData) => {
    const itemsMap = {} // o(k) space 
  
    const purchaseDataArray = purchaseData.split("\n") // o(p) space o(n) time 
    // ^ this is pDa
  
    for (let i = 1; i < purchaseDataArray.length - 1; i++){ // o(p) time p is the # of lines in pDA
      const currStrInArray = purchaseDataArray[i].split(",") // o(m) space o(m) time is the length of each line in pDA
  
      const itemName = currStrInArray[2] 
      const quantity = parseInt(currStrInArray[3]) 
      const price =  parseInt(currStrInArray[4]) 
  
      if(!itemsMap[itemName]){
        const rev = quantity * price 
        const valueObj = {
          "quantity": quantity, 
          "revenue": rev 
        } 
  
        itemsMap[itemName] = valueObj
  
      } else if(itemsMap[itemName]){
        const rev = quantity * price 
        const valueObj = {
          "quantity": itemsMap[itemName]["quantity"] + quantity,
          "revenue": itemsMap[itemName]["revenue"] + rev
        } 
        itemsMap[itemName] = valueObj
      }
    }
    return itemsMap
  }
  
  // time: o(n) + o(p * m) 
  // explanation for time: 
    // o(n) if for the intial split of the input string 
    // o(p * m) is for the traversal of lines in pDa and m is the length of the traversal of each line in pDa 
  // space: o(p + k) 
  // explanation for space: 
    // p is for the number of lines in pDa and k is for the number of entries the itemsMap will have depending on input 
  
  
  console.log(reformatPurchaseData("Order Number,Customer Name,Item Name,Quantity,Price,Date\n1,John Smith,Shirt,2,20,2022-03-01\n2,John Smith,Shoes,1,50,2022-03-01\n3,Jane Doe,Shirt,1,20,2022-03-02\n4,John Smith,Jeans,2,30,2022-03-03\n5,Jane Doe,Shoes,1,50,2022-03-04\n"))
  
  /**
   * Approach
   * make a hashmap to store the names of the items as keys and the value of those keys will be
   * and object with two keys quantity and the revenue and the value of those keys will be number
   *
   * I will make the input string into an array with .split("\n") and exclude the column names in my array
   *
   * I will traverse the newly created array and grab the currElem in the array and split that as well by using
   * .split(",")
   *
   * I will var corresponding to the itemName, quantity and price for readability
   *
   * I will the check if hashmap has the item im currently looking at if doesnt
   *   then populate hashmap with itemName as the key and the value of that key will be an object with keys
   *   quantity and revenue
   * if hashmap already has the item we are currently looking at
   *   then update the value object by grabbing the existing values and incrementing quantity and revenue
   *
   * return hashmap 

   */